bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
{"data"=>{"hello"=>"Hello world, graphql!"}}
{"data"=>{"hello"=>"Hello world, graphql!"}}
The latest bundler is 1.15.4, but you are currently running 1.15.1.
To update, run `gem install bundler`
The latest bundler is 1.15.4, but you are currently running 1.15.1.
To update, run `gem install bundler`
{"data"=>{"hello"=>"Hello world, graphql!"}}
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
The latest bundler is 1.15.4, but you are currently running 1.15.1.
To update, run `gem install bundler`
The latest bundler is 1.15.4, but you are currently running 1.15.1.
To update, run `gem install bundler`
{"data"=>{"hello"=>"Hello world, graphql!"}}
{"data"=>{"hello"=>"Hello world, graphql!"}}
{"data"=>{"hello"=>"Hello world, graphql!"}}
{"data"=>{"hello"=>"Hello world, graphql!"}}
{"query"=>"{ hello }"}
{"query"=>"{ hello }"}
{ hello }
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  post(id: 1) {
    id
    title
  }
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  post(id: 1) {
    id
    title
  }
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  post(id: 1) {
    id
    title
  }
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  post(id: 1) {
    id
    title
  }
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  post(id: 1) {
    id
    title
  }
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  post(id: 1) {
    id
    title
  }
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  post(id: 1) {
    id
    title
  }
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  post(id: 1) {
    id
    title
  }
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  post(id: 1) {
    id
    title
  }
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id,
    title
  }
}

# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}

bundler: failed to load command: unicorn (/usr/local/bin/unicorn)

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#



{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#



{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#



{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#



{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#



{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#



{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#



{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#



{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#



{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}

# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#



{
  hello
}
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#



{
  hello
}
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: 1) {
    id
    title
  }
}



  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        args {
          ...InputValue
        }
        onOperation
        onFragment
        onField
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
        }
      }
    }
  }

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id,
    title,
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id,
    title,
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id,
    title,
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id
    title
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id
    title
  },
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: "1") {
    id
    title
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: "1") {
    id
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#

{
  hello(id: "1") {
    id
    title
  }
}


    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id
    title
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello
}

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }

  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        locations
        args {
          ...InputValue
        }
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                }
              }
            }
          }
        }
      }
    }
  }
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#


    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id
  }
}
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id
  }
}


  query IntrospectionQuery {
    __schema {
      queryType { name }
      mutationType { name }
      subscriptionType { name }
      types {
        ...FullType
      }
      directives {
        name
        description
        args {
          ...InputValue
        }
        onOperation
        onFragment
        onField
      }
    }
  }

  fragment FullType on __Type {
    kind
    name
    description
    fields(includeDeprecated: true) {
      name
      description
      args {
        ...InputValue
      }
      type {
        ...TypeRef
      }
      isDeprecated
      deprecationReason
    }
    inputFields {
      ...InputValue
    }
    interfaces {
      ...TypeRef
    }
    enumValues(includeDeprecated: true) {
      name
      description
      isDeprecated
      deprecationReason
    }
    possibleTypes {
      ...TypeRef
    }
  }

  fragment InputValue on __InputValue {
    name
    description
    type { ...TypeRef }
    defaultValue
  }

  fragment TypeRef on __Type {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
        }
      }
    }
  }

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
  id  
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
  id  
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
  id  
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    hello
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1) {
    id
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 1)
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2)
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2)
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2)
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) { id }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) 
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) 
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello(id: 2) {
    id 
  }
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello
}

    # Welcome to Altair GraphQL Client.

    # Enter your graphQL query here.
{
  hello
}
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
bundler: failed to load command: unicorn (/usr/local/bin/unicorn)
